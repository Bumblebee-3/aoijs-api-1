/*
Aoi.js Functions API

Returns functions information based on the [docs](https://aoi.js.org/)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FindGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindGet200Response{}

// FindGet200Response struct for FindGet200Response
type FindGet200Response struct {
	Functions []string `json:"functions,omitempty"`
}

// NewFindGet200Response instantiates a new FindGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindGet200Response() *FindGet200Response {
	this := FindGet200Response{}
	return &this
}

// NewFindGet200ResponseWithDefaults instantiates a new FindGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindGet200ResponseWithDefaults() *FindGet200Response {
	this := FindGet200Response{}
	return &this
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *FindGet200Response) GetFunctions() []string {
	if o == nil || IsNil(o.Functions) {
		var ret []string
		return ret
	}
	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindGet200Response) GetFunctionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Functions) {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *FindGet200Response) HasFunctions() bool {
	if o != nil && !IsNil(o.Functions) {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []string and assigns it to the Functions field.
func (o *FindGet200Response) SetFunctions(v []string) {
	o.Functions = v
}

func (o FindGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Functions) {
		toSerialize["functions"] = o.Functions
	}
	return toSerialize, nil
}

type NullableFindGet200Response struct {
	value *FindGet200Response
	isSet bool
}

func (v NullableFindGet200Response) Get() *FindGet200Response {
	return v.value
}

func (v *NullableFindGet200Response) Set(val *FindGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindGet200Response(val *FindGet200Response) *NullableFindGet200Response {
	return &NullableFindGet200Response{value: val, isSet: true}
}

func (v NullableFindGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


